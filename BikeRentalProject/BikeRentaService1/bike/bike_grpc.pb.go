// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bike

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BikeRentalServiceClient is the client API for BikeRentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BikeRentalServiceClient interface {
	RentBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*Response, error)
	ReturnBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*Response, error)
	CreateBike(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type bikeRentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBikeRentalServiceClient(cc grpc.ClientConnInterface) BikeRentalServiceClient {
	return &bikeRentalServiceClient{cc}
}

func (c *bikeRentalServiceClient) RentBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bike.BikeRentalService/RentBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeRentalServiceClient) ReturnBike(ctx context.Context, in *BikeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bike.BikeRentalService/ReturnBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeRentalServiceClient) CreateBike(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bike.BikeRentalService/CreateBike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bikeRentalServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.bike.BikeRentalService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BikeRentalServiceServer is the server API for BikeRentalService service.
// All implementations must embed UnimplementedBikeRentalServiceServer
// for forward compatibility
type BikeRentalServiceServer interface {
	RentBike(context.Context, *BikeRequest) (*Response, error)
	ReturnBike(context.Context, *BikeRequest) (*Response, error)
	CreateBike(context.Context, *Address) (*Response, error)
	GetAll(context.Context, *Empty) (*Response, error)
	mustEmbedUnimplementedBikeRentalServiceServer()
}

// UnimplementedBikeRentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBikeRentalServiceServer struct {
}

func (UnimplementedBikeRentalServiceServer) RentBike(context.Context, *BikeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentBike not implemented")
}
func (UnimplementedBikeRentalServiceServer) ReturnBike(context.Context, *BikeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBike not implemented")
}
func (UnimplementedBikeRentalServiceServer) CreateBike(context.Context, *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBike not implemented")
}
func (UnimplementedBikeRentalServiceServer) GetAll(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBikeRentalServiceServer) mustEmbedUnimplementedBikeRentalServiceServer() {}

// UnsafeBikeRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikeRentalServiceServer will
// result in compilation errors.
type UnsafeBikeRentalServiceServer interface {
	mustEmbedUnimplementedBikeRentalServiceServer()
}

func RegisterBikeRentalServiceServer(s grpc.ServiceRegistrar, srv BikeRentalServiceServer) {
	s.RegisterService(&BikeRentalService_ServiceDesc, srv)
}

func _BikeRentalService_RentBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeRentalServiceServer).RentBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bike.BikeRentalService/RentBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeRentalServiceServer).RentBike(ctx, req.(*BikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeRentalService_ReturnBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeRentalServiceServer).ReturnBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bike.BikeRentalService/ReturnBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeRentalServiceServer).ReturnBike(ctx, req.(*BikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeRentalService_CreateBike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeRentalServiceServer).CreateBike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bike.BikeRentalService/CreateBike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeRentalServiceServer).CreateBike(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _BikeRentalService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BikeRentalServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.bike.BikeRentalService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BikeRentalServiceServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BikeRentalService_ServiceDesc is the grpc.ServiceDesc for BikeRentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BikeRentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.bike.BikeRentalService",
	HandlerType: (*BikeRentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RentBike",
			Handler:    _BikeRentalService_RentBike_Handler,
		},
		{
			MethodName: "ReturnBike",
			Handler:    _BikeRentalService_ReturnBike_Handler,
		},
		{
			MethodName: "CreateBike",
			Handler:    _BikeRentalService_CreateBike_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BikeRentalService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bike.proto",
}
